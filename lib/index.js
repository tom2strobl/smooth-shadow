"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const NEWTON_ITERATIONS=4,NEWTON_MIN_SLOPE=.001,SUBDIVISION_PRECISION=1e-7,SUBDIVISION_MAX_ITERATIONS=10,kSplineTableSize=11,kSampleStepSize=1/(kSplineTableSize-1),float32ArraySupported="function"==typeof Float32Array;function A(e,r){return 1-3*r+3*e}function B(e,r){return 3*r-6*e}function C(e){return 3*e}function calcBezier(e,r,n){return((A(r,n)*e+B(r,n))*e+C(r))*e}function getSlope(e,r,n){return 3*A(r,n)*e*e+2*B(r,n)*e+C(r)}function binarySubdivide(e,r,n,t,i){var a;let o,S=0;for(;0<(a=calcBezier(o=r+(n-r)/2,t,i)-e)?n=o:r=o,Math.abs(a)>SUBDIVISION_PRECISION&&++S<SUBDIVISION_MAX_ITERATIONS;);return o}function newtonRaphsonIterate(r,n,t,i){for(let e=0;e<NEWTON_ITERATIONS;++e){var a=getSlope(n,t,i);if(0===a)return n;n-=(calcBezier(n,t,i)-r)/a}return n}function LinearEasing(e){return e}function bezier(o,r,S,n){if(!(0<=o&&o<=1&&0<=S&&S<=1))throw new Error("bezier x values must be in [0, 1] range");if(o===r&&S===n)return LinearEasing;const l=new(float32ArraySupported?Float32Array:Array)(kSplineTableSize);for(let e=0;e<kSplineTableSize;++e)l[e]=calcBezier(e*kSampleStepSize,o,S);return function(e){return 0===e||1===e?e:calcBezier(function(e){let r=0,n=1;for(var t=kSplineTableSize-1;n!==t&&l[n]<=e;++n)r+=kSampleStepSize;--n;var i=(e-l[n])/(l[n+1]-l[n]),a=getSlope(i=r+i*kSampleStepSize,o,S);return a>=NEWTON_MIN_SLOPE?newtonRaphsonIterate(e,i,o,S):0===a?i:binarySubdivide(e,r,r+kSampleStepSize,o,S)}(e),r,n)}}const lerp=(e,r,n)=>e*(1-n)+r*n,clamp=(e,r=0,n=1)=>Math.min(n,Math.max(r,e)),invlerp=(e,r,n)=>clamp((n-e)/(r-e)),roundPixel=e=>Math.round(10*e)/10,roundTransparency=e=>Math.round(1e3*e)/1e3,getSmoothShadow=({distance:e=100,intensity:r=.5,sharpness:n=.5,color:a=[0,0,0],lightPosition:t=[-.35,-.5]})=>{var e=clamp(2*e,0,2e3),r=clamp(r,0,1),n=clamp(n,0,1),i=invlerp(1,2e3,e),o=bezier(.25,1-i,.5,1);const S=Math.round(24*o(i)),l=bezier(0,.3,0,.06)(i)/i*6.5/24*r,p=bezier(0,1,.8,.5),u=e*(-1*t[0]),c=e*(-1*t[1]);o=lerp(200,500,i);const I=lerp(100,o,n);r=bezier(1,0,1,0),e=lerp(0,2,r(1-n));const s=bezier(1,e,1,e);t=lerp(0,.075,1-n);const f=bezier(1,t,1,t);return Array.from(Array(S)).map((e,r)=>{var n=p(r/S),t=f(r/S),r=s(r/S),i=roundPixel(u*t),t=roundPixel(c*t),r=roundPixel(I*r),n=roundTransparency(l*n);return`${i}px ${t}px ${r}px rgba(${a[0]},${a[1]},${a[2]},${n})`}).join(", ")};exports.getSmoothShadow=getSmoothShadow;
//# sourceMappingURL=index.js.map
